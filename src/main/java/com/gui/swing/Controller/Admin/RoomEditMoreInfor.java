/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package com.gui.swing.Controller.Admin;

import com.gui.swing.Entity.Room;
import com.gui.swing.Entity.RoomInfo;
import com.gui.swing.Service.RoomService;
import java.awt.Component;
import java.awt.Container;
import java.awt.Dimension;
import java.awt.FlowLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.ArrayList;
import java.util.List;
import javax.swing.Box;
import javax.swing.BoxLayout;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import org.springframework.context.ConfigurableApplicationContext;

/**
 *
 * @author Acer
 */
public class RoomEditMoreInfor extends javax.swing.JPanel {

    private List<RoomInfo> roomInfosToDelete = new ArrayList<>();
    private ConfigurableApplicationContext context;
    private Room room;

    /**
     * Creates new form RoomEditMoreInfor
     */
    public RoomEditMoreInfor() {
    }

    public RoomEditMoreInfor(Room room, ConfigurableApplicationContext context) {
        this.context = context;
        RoomService roomService = context.getBean(RoomService.class);
        this.room = roomService.findByRoomId(room.getRoomId());
        initComponents();
        initPanelRoomInforSize();
        populateRoomInfoFields(room.getRoomInfoList());
    }

    public void initPanelRoomInforSize() {
        // Đặt kích thước tối thiểu cho panelRoomInfor
        Dimension minSize = new Dimension(465, 423); // Ví dụ kích thước tối thiểu là 465x423
        panelRoomInfor.setMinimumSize(minSize);
        panelRoomInfor.setPreferredSize(minSize);
        panelRoomInfor.setMaximumSize(minSize);
    }

    public void populateRoomInfoFields(List<RoomInfo> roomInfos) {
        panelRoomInfor.setLayout(new BoxLayout(panelRoomInfor, BoxLayout.Y_AXIS));
        panelRoomInfor.removeAll();

        int verticalStrutSize = 10;

        if (roomInfos.isEmpty()) {
            roomInfos.add(new RoomInfo("Diện tích", ""));
            roomInfos.add(new RoomInfo("Máy lạnh", ""));
            roomInfos.add(new RoomInfo("Cửa sổ", ""));
            roomInfos.add(new RoomInfo("Điều hòa", ""));
            roomInfos.add(new RoomInfo("Bồn tắm", ""));
            roomInfos.add(new RoomInfo("Thức ăn", ""));
            roomInfos.add(new RoomInfo("Đồ uống", ""));
        }

        for (RoomInfo info : roomInfos) {
            JPanel panel = new JPanel();
            panel.setLayout(new BoxLayout(panel, BoxLayout.LINE_AXIS));

            JLabel label = new JLabel(info.getKeyRoomInfo() + ":");
            label.setFont(new java.awt.Font("Arial", java.awt.Font.BOLD, 14));

            JTextField textField = new JTextField(info.getValueRoomInfo());
            textField.setColumns(30);

            JButton btnDelete = new JButton("Delete");

            // Center the components horizontally
            panel.add(Box.createHorizontalGlue());
            panel.add(label);
            panel.add(Box.createRigidArea(new Dimension(5, 0)));
            panel.add(textField);
            panel.add(Box.createHorizontalGlue());
            panel.add(btnDelete);

            btnDelete.addActionListener(new ActionListener() {
                @Override
                public void actionPerformed(ActionEvent e) {
                    handleDeleteAction(info, e);
                }
            });

            panelRoomInfor.add(panel);
            panel.setAlignmentX(JPanel.CENTER_ALIGNMENT);
            panelRoomInfor.add(Box.createVerticalStrut(verticalStrutSize));
        }

        panelRoomInfor.revalidate();
        panelRoomInfor.repaint();

    }

    private void handleDeleteAction(RoomInfo infoToDelete, ActionEvent e) {
        int confirm = JOptionPane.showConfirmDialog(this, "Are you sure you want to delete this information?", "Confirm Delete", JOptionPane.YES_NO_OPTION);
        if (confirm == JOptionPane.YES_OPTION) {
            roomInfosToDelete.add(infoToDelete); // Thêm info vào danh sách xóa tạm thời

            // Tìm JPanel chứa nút bấm và xóa nó khỏi giao diện mà không cập nhật CSDL
            Component component = (Component) e.getSource();
            JPanel parent = (JPanel) SwingUtilities.getAncestorOfClass(JPanel.class,
                    component);
            panelRoomInfor.remove(parent);

            panelRoomInfor.revalidate();
            panelRoomInfor.repaint();
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        panelRoomInfor = new javax.swing.JPanel();
        btnSave = new javax.swing.JButton();
        btnAdd = new javax.swing.JButton();

        jLabel1.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jLabel1.setText("ROOM MORE INFOR");

        javax.swing.GroupLayout panelRoomInforLayout = new javax.swing.GroupLayout(panelRoomInfor);
        panelRoomInfor.setLayout(panelRoomInforLayout);
        panelRoomInforLayout.setHorizontalGroup(
            panelRoomInforLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 465, Short.MAX_VALUE)
        );
        panelRoomInforLayout.setVerticalGroup(
            panelRoomInforLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 423, Short.MAX_VALUE)
        );

        btnSave.setText("SAVE");
        btnSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSaveActionPerformed(evt);
            }
        });

        btnAdd.setText("ADD NEW VALUE");
        btnAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(46, 46, 46)
                        .addComponent(panelRoomInfor, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(145, 145, 145)
                        .addComponent(btnSave, javax.swing.GroupLayout.PREFERRED_SIZE, 97, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(36, 36, 36)
                        .addComponent(btnAdd))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(186, 186, 186)
                        .addComponent(jLabel1)))
                .addContainerGap(36, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(panelRoomInfor, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnSave)
                    .addComponent(btnAdd))
                .addContainerGap(51, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btnSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSaveActionPerformed
        try {
            List<RoomInfo> roomInfos = room.getRoomInfoList();

            //  Loại bỏ những RoomInfo đã được đánh dấu là cần xóa khỏi roomInfos
//            roomInfos.removeAll(roomInfosToDelete);
            // Duyệt qua tất cả các thành phần trong panelRoomInfor để cập nhật thông tin
            for (Component comp : panelRoomInfor.getComponents()) {
                if (comp instanceof JPanel) {
                    JPanel panel = (JPanel) comp;
                    Component[] panelComponents = panel.getComponents();

                    // Duyệt qua các thành phần của mỗi Panel để tìm JTextField và JLabel
                    JLabel label = null;
                    JTextField textField = null;
                    for (Component pComp : panelComponents) {
                        if (pComp instanceof JLabel) {
                            label = (JLabel) pComp;
                        } else if (pComp instanceof JTextField) {
                            textField = (JTextField) pComp;
                        }
                    }

                    if (label != null && textField != null) {
                        // Cập nhật thông tin vào RoomInfo tương ứng
                        String keyRoomInfo = label.getText().replace(":", "");
                        String valueRoomInfo = textField.getText();
                        boolean infoExists = false;
                        for (RoomInfo info : roomInfos) {
                            if (info.getKeyRoomInfo().equals(keyRoomInfo)) {
                                info.setValueRoomInfo(valueRoomInfo);
                                infoExists = true;
                                break;
                            }
                        }
                        // Nếu info không tồn tại trong danh sách (có thể đã bị xóa), tạo mới và thêm vào
                        if (!infoExists && !roomInfosToDelete.stream().anyMatch(info -> info.getKeyRoomInfo().equals(keyRoomInfo))) {
                            roomInfos.add(new RoomInfo(keyRoomInfo, valueRoomInfo));

                        }
                    }
                }
            }

            RoomService roomService = context.getBean(RoomService.class
            );
            for (RoomInfo roomInfo : roomInfosToDelete) {
                roomService.removeRoomInfo(room.getRoomId(), roomInfo);
            }
            // Thông báo lưu thành công và đóng form như trước
            JOptionPane.showMessageDialog(this, "Room information saved successfully.", "Success", JOptionPane.INFORMATION_MESSAGE);
            Container frame = SwingUtilities.getAncestorOfClass(JFrame.class,
                    this);
            if (frame != null && frame instanceof JFrame) {
                ((JFrame) frame).dispose();
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Failed to save room information.", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_btnSaveActionPerformed

    private void btnAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddActionPerformed
        NewRoomInfoDialog addDialog = new NewRoomInfoDialog((JFrame) SwingUtilities.getWindowAncestor(this), true);
        addDialog.setLocationRelativeTo(this);
        addDialog.setVisible(true);

        // Sau khi dialog được đóng, tiến hành cập nhật RoomInfo
        RoomInfo newInfo = addDialog.getRoomInfo(); // Lấy thông tin mới từ addDialog
        if (newInfo.getKeyRoomInfo() != null && !newInfo.getKeyRoomInfo().isEmpty()) {
            room.getRoomInfoList().add(newInfo); // Thêm vào danh sách
            populateRoomInfoFields(room.getRoomInfoList()); // Cập nhật UI
        }
    }//GEN-LAST:event_btnAddActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAdd;
    private javax.swing.JButton btnSave;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel panelRoomInfor;
    // End of variables declaration//GEN-END:variables
}
